name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 ffmpeg
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
    
    - name: Install Playwright browsers
      working-directory: ./backend
      run: |
        playwright install chromium
    
    - name: Set up environment variables
      run: |
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-jwt-secret" >> $GITHUB_ENV
    
    - name: Run linting
      working-directory: ./backend
      run: |
        python -m flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run unit tests
      working-directory: ./backend
      run: |
        python run_tests.py --unit --coverage --verbose
    
    - name: Run integration tests
      working-directory: ./backend
      run: |
        python run_tests.py --integration --coverage --verbose
    
    - name: Run end-to-end tests
      working-directory: ./backend
      run: |
        python run_tests.py --e2e --coverage --verbose
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        directory: ./backend/
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
    
    - name: Generate test report
      working-directory: ./backend
      if: always()
      run: |
        python run_tests.py --coverage --html
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          backend/htmlcov/
          backend/coverage.xml
          backend/pytest-report.html
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const coverage = fs.readFileSync('backend/coverage.xml', 'utf8');
            const match = coverage.match(/line-rate="([^"]+)"/);
            if (match) {
              const percentage = Math.round(parseFloat(match[1]) * 100);
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Test Coverage Report\n\nðŸ“Š **Coverage: ${percentage}%**\n\nDetailed coverage report available in the artifacts.`
              });
            }
          } catch (error) {
            console.log('Could not read coverage file:', error.message);
          }

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements-test.txt
    
    - name: Run safety check
      working-directory: ./backend
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run bandit security scan
      working-directory: ./backend
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/safety-report.json
          backend/bandit-report.json

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install locust
    
    - name: Run performance tests
      working-directory: ./backend
      run: |
        # Run a quick performance test
        python -c "
        import time
        import requests
        import subprocess
        import os
        
        # Start the app in background
        env = os.environ.copy()
        env['FLASK_ENV'] = 'testing'
        proc = subprocess.Popen(['python', 'oriel_backend.py'], env=env)
        
        # Wait for app to start
        time.sleep(5)
        
        try:
            # Simple performance check
            start = time.time()
            response = requests.get('http://localhost:5000/api/health', timeout=10)
            end = time.time()
            
            print(f'Health check response time: {end - start:.3f}s')
            print(f'Status code: {response.status_code}')
            
            if end - start > 1.0:
                print('WARNING: Health check took longer than 1 second')
            else:
                print('âœ… Performance check passed')
                
        except Exception as e:
            print(f'Performance test failed: {e}')
        finally:
            proc.terminate()
            proc.wait()
        "